1.引用概念
        （1）代码层面：引用就是一个别名，引用变量与其引用的实体共用一段内存空间，编译器不会给引用变量开辟新的空间
        （2）底层处理：编译器在底层将引用按照指针类似的方式实现，T&-->T* const     const T&-->const T* const,引用变量也有空间的
    2.引用的定义方式
        （1）类型& 引用变量的名字 = 实体;
    3.引用的特性
        （1）引用在定义时必须初始化
        （2）引用一旦与一个实体结合后就不能再引用其他实体
        （3）一个实体可以有多个引用
    4.const类型引用
        （1）const int& a = 10;
        （2）const int& a = b;
        （3）double d = 12.34 const int&rd = d;//创建了临时变量，让rd引用一个具有常性的变量
    5.引用使用场景
        （1）直接给一个实体起别名
        （2）引用做函数的参数；可以达到和指针一样的效果，比指针更安全，引用不需要对参数进行检测，而指针需要判空，能传引用就传引用。如果需要通过形参来改变外部实参，形参类型给成T&，否则给成const T&
        （3）引用作为函数的返回值类型，注意不能返回栈上的类型，如果要返回，返回对象的生命周期比函数的生命周期长（全局变量、静态的局部变量、引用类型的参数、类的成员函数：*this）
    6.C++中三种传参方式的比较
        （1）传值：效率非常低，在传参时要创建一个新的临时对象，不能通过外部形参来改变实参
        （2）传地址
        （3）传引用
    7.指针和引用的区别
        （1）相同点：在底层的处理方式相同，引用在底层就是按照指针的方式处理
        （2）不同点
                （i）指针声明时可以不初始化，但是引用必须初始化
                （ii）指针有多级指针，但引用没有多级引用
                （iii）指针++向后偏移自身类型字节大小，引用++给实体+1
                （iiii）sizeof指针在32位操作系统是4，sizeof引用实体类型的大小
                （iiiii）指针比引用更安全
                （iiiiii）指针可以为空，但引用不能为空
                （iiiiiii）引用在引用一个实体后再不能改变，但指针可以随时指向任何一个类型实体
                （iiiiiiii）指针使用需要解引用，引用编译器自己处理
    8.右值引用（C++11）

//排序链表，要求时间复杂度，这里使用归并排序
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    ListNode* mergeSort(ListNode* Node)
    {
        if(Node == NULL || Node->next == NULL)
            return Node;
        ListNode* fast = Node;
        ListNode* slow = Node;
        ListNode* tmp = NULL;
        while(fast && fast->next)
        {
            tmp = slow;
            fast = fast->next->next;
            slow = slow->next;
        }
        tmp->next = NULL;
        ListNode* l1 = mergeSort(Node);
        ListNode* l2 = mergeSort(slow);
        return merge(l1,l2);
    }
    
    ListNode* merge(ListNode* l1,ListNode* l2)
    {
        if(NULL == l1)
            return l2;
        if(NULL == l2)
            return l1;
        if(l1->val <= l2->val)
        {
            l1->next = merge(l1->next,l2);
            return l1;
        }
        else
        {
            l2->next = merge(l2->next,l1);
            return l2;
        }
    }
    
    ListNode* sortList(ListNode* head) {
        return mergeSort(head);
    }
};

//比特位计数
class Solution {
public:
    
    vector<int> countBits(int num) {
        vector<int> res(num+1,0);
        for(int i = 1;i<=num;++i)
        {
            res[i] = res[i&(i-1)]+1;
                
        }
        return res;
    }
};


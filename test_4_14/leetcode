给定两个字符串s1, s2，找到使两个字符串相等所需删除字符的ASCII值的最小和。

示例 1:

输入: s1 = "sea", s2 = "eat"
输出: 231
解释: 在 "sea" 中删除 "s" 并将 "s" 的值(115)加入总和。
在 "eat" 中删除 "t" 并将 116 加入总和。
结束时，两个字符串相等，115 + 116 = 231 就是符合条件的最小和。
示例 2:

输入: s1 = "delete", s2 = "leet"
输出: 403
解释: 在 "delete" 中删除 "dee" 字符串变成 "let"，
将 100[d]+101[e]+101[e] 加入总和。在 "leet" 中删除 "e" 将 101[e] 加入总和。
结束时，两个字符串都等于 "let"，结果即为 100+101+101+101 = 403 。
如果改为将两个字符串转换为 "lee" 或 "eet"，我们会得到 433 或 417 的结果，比答案更大。
**拿到这道题，看到这种字符串玩转并且求极值的，肯定是动态规划，首先建立一个二维数组dp，其中dp[i][j]表示字符串s1的前i个字符和字符串s2的前j个字符变相等需要删除字符的ASCII值的总和，那么一开始我们要初始化边缘值，就是有一个字符串为空的情况下，需要将另外一个字符串也删为空，这两个字符串就相等了，分别初始化dp的第一行和第一列，这里假设s1存储在列上，方法就是`dp[i][0] = dp[i-1][0]+s1[i-1]`，（这里需要注意的就是二维数组的长度和宽度分别是对应字符串的长度+1，因为两个数组不能重叠），再就是如果当前两个字符串的值相等时，即`s1[i-1] == s2[j-1]`（i，j是从1开始遍历的），就把之前的dp搬下来，在代码中就是`dp[i][j] = dp[i-1][j-1]`，因为在此时两个字符串已经匹配上了，所以直接就可以匹配下一个字符，如果不相等，那就有两种情况，第一种就是删除s1的当前字符，那么就是`dp[i][j] = dp[i-1][j] + s1[i-1]`，第二种就是删除s2的当前字符，那就是`dp[i][j] = dp[i][j-1] + s2[j-1]`，因为不知道到底哪个是较小值，所以取它俩的较小值作为当前值参考参考代码如下：**

```cpp
class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i = 1;i<=n;++i)
        {
            dp[i][0] = dp[i-1][0] + s1[i-1];
        }
        for(int j = 1;j<=m;++j)
        {
            dp[0][j] = dp[0][j-1] + s2[j-1];
        }
        for(int i = 1;i<=n;++i)
        {
            for(int j = 1;j<=m;++j)
            {
                if(s1[i-1] == s2[j-1])
                {
                    dp[i][j] = dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = min(dp[i-1][j]+s1[i-1],dp[i][j-1]+s2[j-1]);
                }
            }
        }
        return dp[n][m];
    }
};
```


static作用于变量：
局部变量指在代码块{}内部定义的变量，只在代码块内部有效（作用域），其默认的存储方式是自动变量或者说是动态存储的，就是指令执行到定义处才给变量分配存储单元，跳出代码块时释放内存单元（生命周期）。用static声明局部变量时，改变变量的存储方式（生命周期），使变量称为静态的局部变量，即编译时就为变量分配内存，直到程序退出才释放内存单元。这样，就使该局部变量有记忆功能，可以记忆上次的数据，但是因为是局部变量，所以只能再代码块内部使用（作用域不变）
外部变量指在代码块{}之外定义的变量，它默认为静态变量，编译时分配内存，程序结束时释放内存单元，同时作用域很广，整个文件都有效甚至别的文件也能引用它，为了限制某些外部变量的作用域，使其只在本文件中有效，而不能被其他文件引用。可以用static关键字对其声明
static作用于函数：
static用于函数定义时，对函数的连接方式产生影响，使得函数只在本文件内部有效，对其他文件是不可见的，这样的函数是叫做静态函数，使用静态函数的好处是，不用担心与其他文件的同名函数产生干扰，另外也是对函数本身的一种保护机制
如果想要其他文件可以使用本地函数，则要在函数定义时使用关键字extern，表示该函数是外部函数，可供其他文件调用，另外要引用别的文件中定义的外部函数的文件中，使用extern声明要用的外部函数即可
const
一、定义常量
1.	修饰变量，以下两种定义方式在本质上是一样的，它的含义是：const修饰的类型为TYPE的变量value是不可变的
TYPE const ValueName = value;
const TYPE ValueName = value;
2.	将const改为外部链接，作用于矿大至全局，编译时会分配内存，并且可以不进行初始化，仅仅作为声明，编译器认为在程序其他方面进行了定义。
extern const int valueName = value;
二、指针使用const
1.	指针本身是常量不可变
int* const p;
const (int*) p;
2.	指针指向的内容是常量不可变
const int* p;
int const *p;
3.	两者都不可以改变
const int* const p;
三、函数中使用const
1.	const 修饰函数参数
a.传递过来的参数在函数内不可以改变
void fun(const int var)
b.参数指针所指内容为常量不可变
void fun(const int* var)
c.参数指针本身为常量不可变
void fun(int* const var)
d.参数为引用，为了增加效率同时防止被修改，修饰引用参数时
void fun(const class& var);//引用参数在函数内不可以改变
void fun(const TYPE& var);//引用参数在函数内为常量不可变
3.	const修饰函数返回值
a.const修饰函数的函数返回值用的不多，
const int fun()//无意义，因为参数返回本身就是赋值
b.const int* fun()//调用时
const int* pVal = fun();//我们可以把fun看作成一个变量，即指针内容不可变
c.int* const fun()//调用时
int* const pVal = fun();//可以把fun()看作一个变量，即指针本身不可变


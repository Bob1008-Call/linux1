地址映射过程中，若在页面中发现将要访问的页面不在内存中，则产生缺页中断，当发生缺页中断时操作系统必须在内存中选择一个页面将其移出内存，以便为即将调入的页面让出空间，而将要���出哪一个页面的规则就是页面置换算法。
一、	最佳置换算法（OPT）（理想置换算法）
这是理想情况下的一种算法，但实际是不可能实现的，算法的基本思想就是当发生缺页时，选择内存中最后要被访问的页面置换出去，但是这根本无法实现，因为操作系统无法知道每个页面下一次访问是在什么时候，虽然这个算法不能实现，但是可以用来衡量其他可以实现的算法。
二、	先进先出置换算法（FIFO）
最简单的页面置换算法就是先进先出算法，这个算法的基本思想就是在主存中停留时间最长的页面移出，即先进入内存的页面，先退出内存。
这种算法只是在按线性顺序访问地址空间时才是最理想的，否则效率不高，因为那些经常被访问的页面，往往在贮存中也停留的最久，结果因为他们在内存中停留的时间太长而不得不被置换出去。
FIFO的一个缺点就是，在增加存储块的情况下，反而使得缺页中断率增加了，当然，导致这种异常现象的页面走向实际很少见。
三、	最近最久未使用算法（LRU）
FIFO算法和OPT算法主要差别就是FIFO算法利用页面进入内存后的时间长短作为置换依据，而OPT算法是依据的是将来使用页面的时间，它的实质就是当需要置换一页时，选择在最近一段时间里最久没有使用过的页面用来置换，称为最久未使用算法。（LRU）
LRU需要硬件的支持，问题是怎么确定最后使用时间的顺序。
1.计数器：每个页表对应一个使用时间字段，CPU增加一个逻辑时钟或者计数器。每次访问内存，时钟+1，每当访问页面，时钟寄存器的内容复制到对应页表项的使用时间字段，这样就可以始终保留着每个页面的最后访问的时间，置换页面的时候，选择该时间值最小的页面，这样做，不仅要查页表，而且当页表改变时要维护这个页表的时间，还要考虑时钟值溢出的问题
2.栈：用一个栈保留页号，每当访问一个页面时，就把它从栈中取出放在栈顶上，栈顶总是放着目前使用最多的页，相反的，栈底放着目前最少使用的页，由于要从栈中移走一项，所以要用具有头尾指针的双向链表维护起来，在最坏的情况下，移走一页需要改变6个指针，每次修改都有开销，但需要置换哪个页面可以直接找到，不用查找，尾指针直接指向栈底。
因为实现LRU算法必须有大量硬件支持，还需要一定的软件开销，所以实现实现的都是简单有效的LRU近似算法。


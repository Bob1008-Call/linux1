亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。

游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。

亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。

假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。
示例：

输入：[5,3,4,5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。

提示：

2 <= piles.length <= 500
piles.length 是偶数。
1 <= piles[i] <= 500
sum(piles) 是奇数。

分析：由于题目的限制条件是石头的堆数是偶数，且石头的总数是奇数，因此Alex可以选择一种策略总是选偶数堆或者奇数堆的石头，则一定可以胜过Lee。简单说，Alex在题目的条件限制下是必胜的。但这里我们需要进行更一般化的分析，例如石头堆数不一定是偶数，石头总数也不一定是奇数，且不但要判断Alex是否能赢，还要判断最多赢多少分，如果输，能不能提供最少输多少分。这里的分数是指多拿的石头数量

按照图中的箭头方向对其进行做减法运算，求二者的最大值。最后右上角的值就是这个最大的差。

class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n,vector<int>(n,0));
        for(int i = 0;i<n;++i)
        {
            dp[i][i] = piles[i];
        }
        for(int dis = 1;dis<n;++dis)
        {
            for(int i = 0;i<n-dis;++i)
            {
                dp[i][dis+i] = max(piles[i]-dp[i+1][dis+i],piles[i+dis]-dp[i][i+dis-1]);
            }
        }
        return dp[0][n-1]>0;
    }
};

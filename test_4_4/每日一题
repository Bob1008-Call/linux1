class Solution {
public:
    int smallestRangeI(vector<int>& A, int K) {
        if(A.size() == 1 || A.size() == 0)
        {
            return 0;
        }
        sort(A.begin(),A.end());
        int index = A.size()-1;
        if(2*K>(A[index]-A[0]))
            return 0;
        return (A[index]-K) - (A[0]+K);
    }
};
//最小差值1

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    int maxDepth(Node* root) {
        if(!root)
            return 0;
        int max = 0;
        for(int i = 0;i<root->children.size();++i)
        {
            max = std::max(max,maxDepth(root->children[i]));
        }
        return max+1;
    }
};
//N叉树的最大深度

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(!root)
            return NULL;
        TreeNode* cur = root;
        while(cur)
        {
            if(val == cur->val)
            {
                return cur;
            }
            else if(val<cur->val)
            {
                cur = cur->left;
            }
            else
            {
                cur = cur->right;
            }
        }
        return NULL;
    }
};
//二叉搜索树的搜索


